name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    # container: node:16 #? we gave this image name from dockerHub  or :
    container: # ? with this way we can set some configuration
      image: node:16
      #env: # ? this env related to the image container and we can know about them from image page in the docker hub

    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb
      MONGODB_CLUSTER_ADDRESS: mongodb
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080
    services: # ?  add container service
      mongodb: #? here we sould set the service name ,it could be anything and we can have alot of service
        image: mongo #? comes from docker hub
        env: #? comes from docker hub
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example #? as this is for test , no matter to be easy to guess password

    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"

#? GitHub Actions service containers are all about : They allow you to run extra services side-by-side with your Jobs and their Steps.So that they can be used by your Jobs and the Steps.And you could, for example, run a database in a container,whilst, your jobs are running so that your Steps and your Jobs can reach out to that database, that's running side-by-side.And as soon as your Workflow finishes,those service containers will also be shut down.And therefore, these testing databases will only be available when your Jobs are currently running.
#? Ex Example: Hosts a testing database
#* Runs inside a container (hosted by the Runner)
#* job steps can communicate with service containers (and the services exposed by them)

#!  you don't have to run your job in a container just to add a extra service container.You can use service containers with the jobs that are running in containers themselves but you can also use service containers in conjunction with jobs that run directly on the runner machine.

## If your Job does run in a container,as it does here,then connecting to container services,is super simple because GitHub Actions will automatically create a networking environment,where you can use the label of your service container,as a connection address.so just need pass mongodb(here) into MONGODB CLUSTER ADDRESS.And this only works if your Job runs in a container,as my Job does here.
